;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     D:\Skola\Mirkoracunari\DC motor sa automatski lijevo i desno\dc_automatski_lijevo_desno.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.5.2.1
//**  Date:          Sunday, April 01, 2018 12:05:02
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F877
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_30
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 10000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f7a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f7a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_UINT8 FCV_ENABLE;
MX_UINT8 FCV_INPUT1;
MX_UINT8 FCV_INPUT2;



#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations

//U zadataku upravljali DC motorom pomocu digitalnih izlaza. To jeste da se motor okrece 5 sekundi u desnu i  zatim u lijevu stranu.


void main()

{
	//Initialization
	adcon1 = 0x07;
0037  3007  	MOVLW 0x07
0038  1683  	BSF STATUS, RP0
0039  1303  	BCF STATUS, RP1
003A  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
003B  30C0  	MOVLW 0xC0
003C  0081  	MOVWF gbl_option_reg



	//Loop
	//Loop: While 1
	while (1)
003D        label4
0095  283D  	GOTO	label4

	{

		//Saljemo logicku 1 na enable port c bit 0
		//Output: 1 -> C0
		trisc = trisc & 0xFE;
003D  30FE  	MOVLW 0xFE
003E  1683  	BSF STATUS, RP0
003F  0507  	ANDWF gbl_trisc, W
0040  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xFE) | 0x01;
0041  30FE  	MOVLW 0xFE
0042  1283  	BCF STATUS, RP0
0043  0507  	ANDWF gbl_portc, W
0044  00C2  	MOVWF CompTempVar2194
0045  3001  	MOVLW 0x01
0046  0442  	IORWF CompTempVar2194, W
0047  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xFE;

		//Saljemo vrijednost 1 na port c bit 1 
		//Output: 1 -> C1
		trisc = trisc & 0xFD;
0048  30FD  	MOVLW 0xFD
0049  1683  	BSF STATUS, RP0
004A  0507  	ANDWF gbl_trisc, W
004B  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xFD) | 0x02;
004C  30FD  	MOVLW 0xFD
004D  1283  	BCF STATUS, RP0
004E  0507  	ANDWF gbl_portc, W
004F  00C2  	MOVWF CompTempVar2195
0050  3002  	MOVLW 0x02
0051  0442  	IORWF CompTempVar2195, W
0052  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xFD;

		//I saljemo vrijednost logiccke 0 na port c bit 2
		//Output: 0 -> C2
		trisc = trisc & 0xFB;
0053  30FB  	MOVLW 0xFB
0054  1683  	BSF STATUS, RP0
0055  0507  	ANDWF gbl_trisc, W
0056  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFB) | 0x04;
		else
			portc = portc & 0xFB;
0057  30FB  	MOVLW 0xFB
0058  1283  	BCF STATUS, RP0
0059  0507  	ANDWF gbl_portc, W
005A  0087  	MOVWF gbl_portc


		//Vrijeme za koje ce motoro okretati u desno
		//Delay: 5 s
		delay_s(5);
005B  3005  	MOVLW 0x05
005C  00C2  	MOVWF delay_s_00000_arg_del
005D  2028  	CALL delay_s_00000


		//Saljemo vrijednost logicke 0 na port c bit 0
		//Output: 0 -> C0
		trisc = trisc & 0xFE;
005E  30FE  	MOVLW 0xFE
005F  1683  	BSF STATUS, RP0
0060  0507  	ANDWF gbl_trisc, W
0061  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFE) | 0x01;
		else
			portc = portc & 0xFE;
0062  30FE  	MOVLW 0xFE
0063  1283  	BCF STATUS, RP0
0064  0507  	ANDWF gbl_portc, W
0065  0087  	MOVWF gbl_portc


		//Vrijeme za koje ce se motor prestati okretati
		//Delay: 3 s
		delay_s(3);
0066  3003  	MOVLW 0x03
0067  00C2  	MOVWF delay_s_00000_arg_del
0068  2028  	CALL delay_s_00000


		//Saljemo vrijednost logicke 1 na port c bit 0 tj. na enable
		//Output: 1 -> C0
		trisc = trisc & 0xFE;
0069  30FE  	MOVLW 0xFE
006A  1683  	BSF STATUS, RP0
006B  0507  	ANDWF gbl_trisc, W
006C  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xFE) | 0x01;
006D  30FE  	MOVLW 0xFE
006E  1283  	BCF STATUS, RP0
006F  0507  	ANDWF gbl_portc, W
0070  00C2  	MOVWF CompTempVar2196
0071  3001  	MOVLW 0x01
0072  0442  	IORWF CompTempVar2196, W
0073  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xFE;

		//Saljemo vrijednost 0 na port c bit 1 tj. input 1
		//Output: 0 -> C1
		trisc = trisc & 0xFD;
0074  30FD  	MOVLW 0xFD
0075  1683  	BSF STATUS, RP0
0076  0507  	ANDWF gbl_trisc, W
0077  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFD) | 0x02;
		else
			portc = portc & 0xFD;
0078  30FD  	MOVLW 0xFD
0079  1283  	BCF STATUS, RP0
007A  0507  	ANDWF gbl_portc, W
007B  0087  	MOVWF gbl_portc


		//Saljemo vrijendost logicke 1 na port c bit 2 tj.input 2
		//Output: 1 -> C2
		trisc = trisc & 0xFB;
007C  30FB  	MOVLW 0xFB
007D  1683  	BSF STATUS, RP0
007E  0507  	ANDWF gbl_trisc, W
007F  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xFB) | 0x04;
0080  30FB  	MOVLW 0xFB
0081  1283  	BCF STATUS, RP0
0082  0507  	ANDWF gbl_portc, W
0083  00C2  	MOVWF CompTempVar2197
0084  3004  	MOVLW 0x04
0085  0442  	IORWF CompTempVar2197, W
0086  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xFB;

		//Vrijeme za koje ce se okretati motor u desno
		//Delay: 5 s
		delay_s(5);
0087  3005  	MOVLW 0x05
0088  00C2  	MOVWF delay_s_00000_arg_del
0089  2028  	CALL delay_s_00000


		//Motor ce se iskljuciti jer saljemo log. 0 na port c bit 0
		//Output: 0 -> C0
		trisc = trisc & 0xFE;
008A  30FE  	MOVLW 0xFE
008B  1683  	BSF STATUS, RP0
008C  0507  	ANDWF gbl_trisc, W
008D  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFE) | 0x01;
		else
			portc = portc & 0xFE;
008E  30FE  	MOVLW 0xFE
008F  1283  	BCF STATUS, RP0
0090  0507  	ANDWF gbl_portc, W
0091  0087  	MOVWF gbl_portc


		//Vrijme za koje ce motor biti iskljucen
		//Delay: 3 s
		delay_s(3);
0092  3003  	MOVLW 0x03
0093  00C2  	MOVWF delay_s_00000_arg_del
0094  2028  	CALL delay_s_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
00BE  1283  	BCF STATUS, RP0
00BF  1303  	BCF STATUS, RP1
00C0  0E36  	SWAPF Int1BContext+D'2', W
00C1  0084  	MOVWF FSR
00C2  0E35  	SWAPF Int1BContext+D'1', W
00C3  008A  	MOVWF PCLATH
00C4  0E34  	SWAPF Int1BContext, W
00C5  0083  	MOVWF STATUS
00C6  0EFF  	SWAPF Int1Context, F
00C7  0E7F  	SWAPF Int1Context, W
00C8  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2896  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  28BE  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C3  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  3EFF  	ADDLW 0xFF
001C  1D03  	BTFSS STATUS,Z
001D  2815  	GOTO	label2
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  0BC3  	DECFSZ delay_ms_00000_arg_del, F
0026  2814  	GOTO	label1
0027  0008  	RETURN
0028        ; } delay_ms function end

0028        delay_s_00000
0028        ; { delay_s ; function begin
0028        label3
0028  30FA  	MOVLW 0xFA
0029  00C3  	MOVWF delay_ms_00000_arg_del
002A  2010  	CALL delay_ms_00000
002B  30FA  	MOVLW 0xFA
002C  00C3  	MOVWF delay_ms_00000_arg_del
002D  2010  	CALL delay_ms_00000
002E  30FA  	MOVLW 0xFA
002F  00C3  	MOVWF delay_ms_00000_arg_del
0030  2010  	CALL delay_ms_00000
0031  30FA  	MOVLW 0xFA
0032  00C3  	MOVWF delay_ms_00000_arg_del
0033  2010  	CALL delay_ms_00000
0034  0BC2  	DECFSZ delay_s_00000_arg_del, F
0035  2828  	GOTO	label3
0036  0008  	RETURN
0037        ; } delay_s function end


0096        _startup
0096  30D5  	MOVLW 0xD5
0097  1283  	BCF STATUS, RP0
0098  1303  	BCF STATUS, RP1
0099  00A0  	MOVWF gbl_14_LSR
009A  30C4  	MOVLW 0xC4
009B  00A1  	MOVWF gbl_14_LSR+D'1'
009C  30BB  	MOVLW 0xBB
009D  00A2  	MOVWF gbl_14_LSR+D'2'
009E  30DC  	MOVLW 0xDC
009F  00A3  	MOVWF gbl_14_LSR+D'3'
00A0  01A4  	CLRF gbl_15_gbl_aSig
00A1  01A5  	CLRF gbl_15_gbl_aSig+D'1'
00A2  01A6  	CLRF gbl_15_gbl_aSig+D'2'
00A3  01A7  	CLRF gbl_15_gbl_aSig+D'3'
00A4  01A8  	CLRF gbl_15_gbl_bSig
00A5  01A9  	CLRF gbl_15_gbl_bSig+D'1'
00A6  01AA  	CLRF gbl_15_gbl_bSig+D'2'
00A7  01AB  	CLRF gbl_15_gbl_bSig+D'3'
00A8  01AC  	CLRF gbl_15_gbl_zSig
00A9  01AD  	CLRF gbl_15_gbl_zSig+D'1'
00AA  01AE  	CLRF gbl_15_gbl_zSig+D'2'
00AB  01AF  	CLRF gbl_15_gbl_zSig+D'3'
00AC  01BC  	CLRF gbl_15_gbl_aExp
00AD  01BD  	CLRF gbl_15_gbl_bExp
00AE  01B7  	CLRF gbl_15_gbl_zExp
00AF  01B8  	CLRF gbl_15_gbl_zExp+D'1'
00B0  01BE  	CLRF gbl_15_gbl_aSign
00B1  01BF  	CLRF gbl_15_gbl_bSign
00B2  01C0  	CLRF gbl_15_gbl_zSign
00B3  01C1  	CLRF gbl_15_gbl_zSigZero
00B4  01B0  	CLRF gbl_15_gbl_ret
00B5  01B1  	CLRF gbl_15_gbl_ret+D'1'
00B6  01B2  	CLRF gbl_15_gbl_ret+D'2'
00B7  01B3  	CLRF gbl_15_gbl_ret+D'3'
00B8  01BA  	CLRF gbl_float_rounding_mode
00B9  01BB  	CLRF gbl_float_exception_flags
00BA  01B9  	CLRF gbl_float_detect_tininess
00BB  118A  	BCF PCLATH,3
00BC  120A  	BCF PCLATH,4
00BD  2837  	GOTO	main

2007  3F7A  	DW 0x3F7A
